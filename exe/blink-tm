#!/usr/bin/env ruby
require 'blink_tm'


if ARGV.any?(/^\-(\-version|v)$/)
	puts "BlinkTM Version #{BlinkTM::BOLD}#{BlinkTM::VERSION}#{BlinkTM::RESET}"
	exit
end

coords = ARGV.select { |x| x[/^\-(\-coords|c)=.+$/] }.last
daylight_checker_options = { latitude: nil, longitude: nil }

if coords && !coords.empty?
	lat_long = coords.split('=').last
	lat, long = lat_long.split(',')

	abort('Please specify latitude and longitude splitted by a comma (,). For example -22.88,88.33') if !lat || !long

	daylight_checker_options[:latitude] = lat
	daylight_checker_options[:longitude] = long
end

written_pid = false

BlinkTM::log "BlinkTM Version #{BlinkTM::VERSION}"
if File.exist?(BlinkTM::LOCKFILE)
	BlinkTM.log 'error', "Lock file #{BlinkTM::LOCKFILE} already exists! If it's not running you might manually delete this to make blinktm work."

	pid = IO.read(BlinkTM::LOCKFILE) if File.readable?(BlinkTM::LOCKFILE)
	process_name = File.readable?("/proc/#{pid}/cmdline") ? IO.read("/proc/#{pid}/cmdline") : 'unknown'
	stat = File.readable?("/proc/#{pid}/stat") ? IO.read("/proc/#{pid}/stat") : nil
	state = stat ? stat.gsub(/\(.+\)/, '').split[1] : 'unknown'
	friendly_state = case state
		when ?S then 'Sleeping'
		when ?I then 'Idle'
		when ?Z then 'Zombie'
		when ?R then 'Running'
		when ?T then 'Stopped'
		else 'Unknown'
	end

	BlinkTM.log 'info', <<~EOF
		Process Details:
		\t- ID: #{pid}
		\t- Command: #{File.basename(process_name.gsub(?\u0000, ?\s))}
		\t- Status: #{friendly_state}
	EOF

	exit!
else
	begin
		IO.write(BlinkTM::LOCKFILE, $$)
		written_pid = true
	rescue Exception
		puts "Can't write to #{BlinkTM::LOCKFILE}"
		exit!
	end
end

retry_count = 0

# Find Device running Blink Taskmanager
file = nil

begin
	dev = BlinkTM::find_device!
	BlinkTM.start(dev, daylight_checker_options) { |x| file = x }
rescue BlinkTM::SyncError
	sleep 1
	retry
rescue Errno::ENOENT, Errno::EIO, BlinkTM::NoDeviceError
	file &.close
	sleep 0.125
	dev = BlinkTM::find_device!
	retry
rescue Interrupt, SystemExit, SignalException
	file &.close
rescue Exception
	mesg = <<~EOF
		:: Time: #{Time.now.strftime("%A %d %B %Y, %H:%M:%S:%5N %p")}:
		#{$!.full_message}

		Please notify these bugs to the issue tracker.
		#{'-' * 70}
	EOF

	if File.writable?(BlinkTM::LOGFILE)
		log = File.open(BlinkTM::LOGFILE, 'a')
		log.write(mesg)
		log.close
	else
		puts "Logs aren't writable\n\nHere's a detailed message of what has happened:"
		puts mesg
	end
ensure
	File.delete(BlinkTM::LOCKFILE)
end
